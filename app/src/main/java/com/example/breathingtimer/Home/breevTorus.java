package com.example.breathingtimer.Home;

/* autogenerated by Processing revision 1293 on 2023-10-23 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import peasy.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class breevTorus extends PApplet {
    
    PeasyCam cam;
    Torus torus;
    int radius = 700;
    int tubeRadius = 700;
    int camPosition = 1800;

    public void setup() {
        /* size commented out by preprocessor */;
        cam = new PeasyCam(this, camPosition);
        torus = new Torus();
    }

    public void draw() {
        background(0);
        stroke(210);
        strokeWeight(0.7f);
        fill(255);

        rotateX(PI/2 + radians(-5));
        torus.drawTorus();

    }

    class Torus {
        PVector[][] surface;
        int detail = 70;
        int radius = 700;
        int tubeRadius = 550;
        float torusHeight = 3;
        int torusWidth = 1;

        float speed = 3;

        int strokeColor = 215;
        int fillColor = 255;
        int shimmerColor = 230;

        int shimmerFreq = 100;
        int shimmerSpeed = 10;

        float rotationAngle = 0.0f; // New variable to track the rotation angle
        int shimmerCounter = 0;

        Torus() {
            surface = new PVector[detail+1][detail+1];
        }

        public void drawTorus() {
            fill(fillColor);
            stroke(strokeColor);

            //rotate torus
            rotationAngle += speed * 0.001f;
            if(frameCount % shimmerSpeed == 0){
                shimmerCounter++;
            }

            for (int i = 0; i < detail+1; i++) {
                float lat = map(i, 0, detail, -PI, PI);
                lat += rotationAngle;
                for (int j = 0; j < detail+1; j++) {
                    float lon = map(j, 0, detail, -TWO_PI, TWO_PI);
                    float x = torusWidth * (radius + (tubeRadius * cos(lon))) * cos(lat);
                    float y = torusHeight * (radius + (tubeRadius * cos(lon))) * sin(lat);
                    float z = tubeRadius * sin(lon);
                    surface[i][j] = new PVector(x, y, z);
                }
            }

            for (int i = 0; i < detail; i++) {
                beginShape(TRIANGLE_STRIP);
                for (int j = 0; j < detail+1; j++) {

                    //shimmer
        /*if ((j == shimmerCounter % shimmerFreq)
        && (j > detail * 0.5 && j < detail * 0.9)){
          fill(shimmerColor);
          stroke(strokeColor);
        } else {
          fill(fillColor);
          stroke(strokeColor);
        }      */

                    PVector v1 = surface[i][j];
                    vertex(v1.x, v1.y, v1.z);
                    PVector v2 = surface[i+1][j];
                    vertex(v2.x, v2.y, v2.z);
                }
                endShape();
            }


        }

        public void setSpeed(int tempSpeed){
            speed = tempSpeed;
        }
    }


    public void settings() { fullScreen(P3D); }

    static public void main(String[] passedArgs) {
        String[] appletArgs = new String[] { "breevTorusAndroid" };
        if (passedArgs != null) {
            PApplet.main(concat(appletArgs, passedArgs));
        } else {
            PApplet.main(appletArgs);
        }
    }
}
